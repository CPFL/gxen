./"/* io_getevents:
./" *      Attempts to read at least min_nr events and up to nr events from
./" *      the completion queue for the aio_context specified by ctx_id.  May
./" *      fail with -EINVAL if ctx_id is invalid, if min_nr is out of range,
./" *      if nr is out of range, if when is out of range.  May fail with
./" *      -EFAULT if any of the memory specified to is invalid.  May return
./" *      0 or < min_nr if no events are available and the timeout specified
./" *      by when has elapsed, where when == NULL specifies an infinite
./" *      timeout.  Note that the timeout pointed to by when is relative and
./" *      will be updated if not NULL and the operation blocks.  Will fail
./" *      with -ENOSYS if not implemented.
./" */
./"asmlinkage long sys_io_getevents(io_context_t ctx_id,
./"                                 long min_nr,
./"                                 long nr,
./"                                 struct io_event *events,
./"                                 struct timespec *timeout)
./"
.TH io_getevents 2 2002-09-03 "Linux 2.4" "Linux AIO"
.SH NAME
io_getevents \- read resulting events from io requests
.SH SYNOPSIS
.B #include <errno.h>
.br
.B #include <libaio.h>
.sp
.BI "int io_getevents(io_context_t " ctx ", long " min_nr ", long " nr ", struct io_events *" events "[], struct timespec *" timeout ");"


